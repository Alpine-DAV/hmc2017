#!/usr/bin/env python

from __future__ import division

import argparse
import matplotlib.pyplot as plt
import numpy as np
import os
from scipy.optimize import curve_fit
import sys
from uncertainties import ufloat

TIME_TRAIN = 'time_train'
NODES = 'nodes'
DENSITY = 'density'

def chi_sq(expected, observed):
    return sum((o - e)**2 / e for o, e in zip(observed, expected))

def group_by(key, rows):
    srows = sorted(rows, key=lambda row: row[key])
    groups = []

    cur_key = srows[0][key]
    split_indices = []
    for i, row in enumerate(srows):
        if row[key] != cur_key:
            split_indices.append(i)
            cur_key = row[key]

    return np.split(srows, split_indices)

def perfect_strong_scaling(points):
    def f(n):
        t0 = points[0][TIME_TRAIN]
        n0 = points[0][NODES]
        return t0 * n0 / n
    return f

def fit_strong_scaling(points):
    # fit function: f(n) = An^p
    def f(n, A, p):
        return A * n**p

    (A, p), pcov = curve_fit(f, points[NODES], points[TIME_TRAIN], p0=(1,-1))
    A_err, p_err = np.sqrt(np.diag(pcov))

    return ufloat(A, A_err), ufloat(p, p_err)

def perfect_weak_scaling(density, nodes):
    def f(d):
        slope = nodes[-1] / density[-1]
        return slope*(d - density[0]) + nodes[0]
    return f

def fit_weak_scaling(X, Y):
    # fit function: f(d) = md + b
    def f(d, m, b):
        return m*d + b

    (m, b), pcov = curve_fit(f, X, [y.nominal_value for y in Y], sigma = [y.std_dev for y in Y])
    m_err, b_err = np.sqrt(np.diag(pcov))

    return ufloat(m, m_err), ufloat(b, b_err)

def nodes_required(A, p, t):
    # t = An^p
    return (t/A)**(1/p)

def plot_strong_scaling(points, dir):
    plt.plot(points[NODES], points[TIME_TRAIN],
        '-o', color=(0, 0.1, 0.9), label='training time')

    A, p = fit_strong_scaling(points)
    lin_X = np.linspace(points[0][NODES], points[-1][NODES], 1000)
    plt.plot(lin_X, [(A * n**p).nominal_value for n in lin_X],
        color=(0, 0.2, 0.6), linewidth=1, label='Ax^p\nA={}\np={}'.format(A, p))

    perfect_scaling = perfect_strong_scaling(points)
    chi2 = chi_sq(points[TIME_TRAIN], [perfect_scaling(n) for n in points[NODES]])
    plt.plot(lin_X, [perfect_scaling(x) for x in lin_X],
        color=(0.6, 0, 0.2), label='perfect scaling\nchi2={}'.format(chi2))

    plt.legend()
    plt.xlabel('# of Nodes')
    plt.ylabel('Time (s)')
    plt.title('Strong Scaling (Density = {})'.format(points[0][DENSITY]))
    plt.grid()

    plt.savefig(os.path.join(dir, 'strong_scaling_{}.png'.format(points[0][DENSITY])), format='png')
    plt.clf()

    return A, p

def plot_weak_scaling(fits, time, dir):
    nodes = [nodes_required(A, p, time) for _, A, p in fits]
    density = [density for density, _, _ in fits]
    _, ax = plt.subplots()
    ax.errorbar(density, [n.nominal_value for n in nodes], yerr=[n.std_dev for n in nodes],
        color=(0, 0.1, 0.9), zorder=4, label='nodes required')

    m, b = fit_weak_scaling(density, nodes)
    lin_X = np.linspace(min(density), max(density), 1000)
    plt.plot(lin_X, [(m*d + b).nominal_value for d in lin_X],
        color=(0, 0.2, 0.6), linewidth=1, zorder=3, label='md + b\nm={}\nb={}'.format(m, b))

    perfect_scaling = perfect_weak_scaling(density, nodes)
    chi2 = chi_sq(nodes, [perfect_scaling(d) for d in density])
    perf = [perfect_scaling(x) for x in lin_X]
    ax.errorbar(lin_X, [p.nominal_value for p in perf], yerr=[p.std_dev for p in perf],
        color=(0.8, 0, 0.2), alpha=0.2, zorder=2, label='perfect scaling\nchi2={}'.format(chi2))

    plt.legend()
    plt.xlabel('Density')
    plt.ylabel('# of Nodes')
    plt.title('Weak Scaling (Time = {} s)'.format(time))
    plt.grid()

    plt.savefig(os.path.join(dir, 'weak_scaling_{}.png'.format(time)), format='png')
    plt.clf()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Visualize data generated by scaling.py')
    parser.add_argument(
        '--input', type=str, help='CSV file generated by scaling.py (default stdin)', default=None)
    parser.add_argument(
        '--output', type=str, default='.', help='output directory for graphs (default .)')
    args = parser.parse_args()

    csv = np.genfromtxt(args.input if args.input is not None else sys.stdin, names=True, delimiter=',')

    fits = []
    for group in group_by(DENSITY, csv):
        A, p = plot_strong_scaling(group, args.output)
        fits.append((group[0][DENSITY], A, p))

    plot_weak_scaling(fits, 0.2, args.output)
    plot_weak_scaling(fits, 0.5, args.output)
    plot_weak_scaling(fits, 1.0, args.output)
